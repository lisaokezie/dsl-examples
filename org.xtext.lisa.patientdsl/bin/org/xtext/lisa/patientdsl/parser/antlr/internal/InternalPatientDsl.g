/*
 * generated by Xtext 2.33.0
 */
grammar InternalPatientDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.lisa.patientdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.lisa.patientdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.lisa.patientdsl.services.PatientDslGrammarAccess;

}

@parser::members {

 	private PatientDslGrammarAccess grammarAccess;

    public InternalPatientDslParser(TokenStream input, PatientDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected PatientDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getPatientsPatientParserRuleCall_0());
			}
			lv_patients_0_0=rulePatient
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"patients",
					lv_patients_0_0,
					"org.xtext.lisa.patientdsl.PatientDsl.Patient");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulePatient
entryRulePatient returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatientRule()); }
	iv_rulePatient=rulePatient
	{ $current=$iv_rulePatient.current; }
	EOF;

// Rule Patient
rulePatient returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='patient'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatientAccess().getPatientKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPatientAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatientRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='insuranceType'
		{
			newLeafNode(otherlv_2, grammarAccess.getPatientAccess().getInsuranceTypeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatientAccess().getInsuranceTypeInsuranceTypeEnumRuleCall_3_0());
				}
				lv_insuranceType_3_0=ruleInsuranceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatientRule());
					}
					set(
						$current,
						"insuranceType",
						lv_insuranceType_3_0,
						"org.xtext.lisa.patientdsl.PatientDsl.InsuranceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='insuranceNumber'
		{
			newLeafNode(otherlv_4, grammarAccess.getPatientAccess().getInsuranceNumberKeyword_4());
		}
		(
			(
				lv_insuranceNumber_5_0=RULE_INT
				{
					newLeafNode(lv_insuranceNumber_5_0, grammarAccess.getPatientAccess().getInsuranceNumberINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatientRule());
					}
					setWithLastConsumed(
						$current,
						"insuranceNumber",
						lv_insuranceNumber_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_6='email'
			{
				newLeafNode(otherlv_6, grammarAccess.getPatientAccess().getEmailKeyword_6_0());
			}
			(
				(
					lv_email_7_0=RULE_EMAIL
					{
						newLeafNode(lv_email_7_0, grammarAccess.getPatientAccess().getEmailEMAILTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPatientRule());
						}
						setWithLastConsumed(
							$current,
							"email",
							lv_email_7_0,
							"org.xtext.lisa.patientdsl.PatientDsl.EMAIL");
					}
				)
			)
		)?
		(
			otherlv_8='phoneNumber'
			{
				newLeafNode(otherlv_8, grammarAccess.getPatientAccess().getPhoneNumberKeyword_7_0());
			}
			(
				(
					lv_phoneNumber_9_0=RULE_STRING
					{
						newLeafNode(lv_phoneNumber_9_0, grammarAccess.getPatientAccess().getPhoneNumberSTRINGTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPatientRule());
						}
						setWithLastConsumed(
							$current,
							"phoneNumber",
							lv_phoneNumber_9_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
	)
;

// Rule InsuranceType
ruleInsuranceType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='private'
			{
				$current = grammarAccess.getInsuranceTypeAccess().getPRIVATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getInsuranceTypeAccess().getPRIVATEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='compulsory'
			{
				$current = grammarAccess.getInsuranceTypeAccess().getCOMPULSORYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getInsuranceTypeAccess().getCOMPULSORYEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_EMAIL : RULE_ID '@' RULE_ID '.' RULE_ID;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
