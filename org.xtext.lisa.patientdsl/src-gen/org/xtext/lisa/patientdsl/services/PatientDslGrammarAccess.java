/*
 * generated by Xtext 2.33.0
 */
package org.xtext.lisa.patientdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PatientDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lisa.patientdsl.PatientDsl.Model");
		private final Assignment cPatientsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatientsPatientParserRuleCall_0 = (RuleCall)cPatientsAssignment.eContents().get(0);
		
		//Model:
		//    patients+=Patient*;
		@Override public ParserRule getRule() { return rule; }
		
		//patients+=Patient*
		public Assignment getPatientsAssignment() { return cPatientsAssignment; }
		
		//Patient
		public RuleCall getPatientsPatientParserRuleCall_0() { return cPatientsPatientParserRuleCall_0; }
	}
	public class PatientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lisa.patientdsl.PatientDsl.Patient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInsuranceTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInsuranceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInsuranceTypeInsuranceTypeEnumRuleCall_3_0 = (RuleCall)cInsuranceTypeAssignment_3.eContents().get(0);
		private final Keyword cInsuranceNumberKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInsuranceNumberAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInsuranceNumberINTTerminalRuleCall_5_0 = (RuleCall)cInsuranceNumberAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEmailKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEmailAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEmailEMAILTerminalRuleCall_6_1_0 = (RuleCall)cEmailAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cPhoneNumberKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPhoneNumberAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPhoneNumberSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cPhoneNumberAssignment_7_1.eContents().get(0);
		
		//Patient:
		//    'patient' name=ID
		//    'insuranceType' insuranceType=InsuranceType
		//    'insuranceNumber' insuranceNumber=INT
		//    ('email' email=EMAIL)?
		//    ('phoneNumber' phoneNumber=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'patient' name=ID
		//'insuranceType' insuranceType=InsuranceType
		//'insuranceNumber' insuranceNumber=INT
		//('email' email=EMAIL)?
		//('phoneNumber' phoneNumber=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'patient'
		public Keyword getPatientKeyword_0() { return cPatientKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'insuranceType'
		public Keyword getInsuranceTypeKeyword_2() { return cInsuranceTypeKeyword_2; }
		
		//insuranceType=InsuranceType
		public Assignment getInsuranceTypeAssignment_3() { return cInsuranceTypeAssignment_3; }
		
		//InsuranceType
		public RuleCall getInsuranceTypeInsuranceTypeEnumRuleCall_3_0() { return cInsuranceTypeInsuranceTypeEnumRuleCall_3_0; }
		
		//'insuranceNumber'
		public Keyword getInsuranceNumberKeyword_4() { return cInsuranceNumberKeyword_4; }
		
		//insuranceNumber=INT
		public Assignment getInsuranceNumberAssignment_5() { return cInsuranceNumberAssignment_5; }
		
		//INT
		public RuleCall getInsuranceNumberINTTerminalRuleCall_5_0() { return cInsuranceNumberINTTerminalRuleCall_5_0; }
		
		//('email' email=EMAIL)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'email'
		public Keyword getEmailKeyword_6_0() { return cEmailKeyword_6_0; }
		
		//email=EMAIL
		public Assignment getEmailAssignment_6_1() { return cEmailAssignment_6_1; }
		
		//EMAIL
		public RuleCall getEmailEMAILTerminalRuleCall_6_1_0() { return cEmailEMAILTerminalRuleCall_6_1_0; }
		
		//('phoneNumber' phoneNumber=STRING)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'phoneNumber'
		public Keyword getPhoneNumberKeyword_7_0() { return cPhoneNumberKeyword_7_0; }
		
		//phoneNumber=STRING
		public Assignment getPhoneNumberAssignment_7_1() { return cPhoneNumberAssignment_7_1; }
		
		//STRING
		public RuleCall getPhoneNumberSTRINGTerminalRuleCall_7_1_0() { return cPhoneNumberSTRINGTerminalRuleCall_7_1_0; }
	}
	
	public class InsuranceTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lisa.patientdsl.PatientDsl.InsuranceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPULSORYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPULSORYCompulsoryKeyword_1_0 = (Keyword)cCOMPULSORYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InsuranceType: PRIVATE = 'private' | COMPULSORY = 'compulsory';
		public EnumRule getRule() { return rule; }
		
		//PRIVATE = 'private' | COMPULSORY = 'compulsory'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PRIVATE = 'private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }
		
		//COMPULSORY = 'compulsory'
		public EnumLiteralDeclaration getCOMPULSORYEnumLiteralDeclaration_1() { return cCOMPULSORYEnumLiteralDeclaration_1; }
		
		//'compulsory'
		public Keyword getCOMPULSORYCompulsoryKeyword_1_0() { return cCOMPULSORYCompulsoryKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final PatientElements pPatient;
	private final InsuranceTypeElements eInsuranceType;
	private final TerminalRule tEMAIL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PatientDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPatient = new PatientElements();
		this.eInsuranceType = new InsuranceTypeElements();
		this.tEMAIL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.lisa.patientdsl.PatientDsl.EMAIL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.lisa.patientdsl.PatientDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    patients+=Patient*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Patient:
	//    'patient' name=ID
	//    'insuranceType' insuranceType=InsuranceType
	//    'insuranceNumber' insuranceNumber=INT
	//    ('email' email=EMAIL)?
	//    ('phoneNumber' phoneNumber=STRING)?;
	public PatientElements getPatientAccess() {
		return pPatient;
	}
	
	public ParserRule getPatientRule() {
		return getPatientAccess().getRule();
	}
	
	//enum InsuranceType: PRIVATE = 'private' | COMPULSORY = 'compulsory';
	public InsuranceTypeElements getInsuranceTypeAccess() {
		return eInsuranceType;
	}
	
	public EnumRule getInsuranceTypeRule() {
		return getInsuranceTypeAccess().getRule();
	}
	
	//terminal EMAIL: ID '@' ID '.' ID;
	public TerminalRule getEMAILRule() {
		return tEMAIL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
